name: Build macOS App

on:
  push

jobs:
  macos12:
    runs-on: macos-12

    steps:
      # Checkout the repository code
      - uses: actions/checkout@v4

      # Configure git credentials (optional step, depending on need)
      - name: Configure git credentials
        run: git config credential.helper

      # Select specific Xcode version (requires pre-installed Xcode 13.1 on runner)
      - name: Select Xcode version
        run: |
          ls -la /Applications/Xcode*
          sudo xcode-select -switch /Applications/Xcode_13.1.app

      # Verify LLVM GCC installation
      - name: Check GCC version
        run: llvm-gcc --version

      - name: Install Python 3
        run: |
          echo "Installing Python 3..."
          brew install --quiet python@3 || brew link --overwrite python@3

      - name: Install additional dependencies
        run: |
          echo "Installing automake..."
          brew install --quiet automake
          echo "Installing Berkeley DB..."
          brew install --quiet berkeley-db@4
          echo "Installing miniupnpc..."
          brew install --quiet miniupnpc
          echo "Installing qt@5..."
          brew install --quiet qt@5
          echo "Installing gperf..."
          brew install --quiet gperf
          echo "Installing qrencode..."
          brew install --quiet qrencode
          echo "Installing librsvg..."
          brew install --quiet librsvg

      - name: Handle OpenSSL version conflict
        run: |
          echo "Unlinking openssl@3 and linking openssl@1.1..."
          brew unlink openssl@3 || true  # Ignore error if openssl@3 isn't installed
          brew link --overwrite openssl@1.1

      - name: Install Protobuf@21
        run: |
          echo "Installing protobuf@21..."
          brew install protobuf@21

      # Download and prepare Boost library with a patch
      - name: Download and setup Boost
        run: |
          wget http://sourceforge.net/projects/boost/files/boost/1.67.0/boost_1_67_0.tar.gz
          wget --no-verbose https://github.com/boostorg/atomic/commit/6e14ca24dab50ad4c1fa8c27c7dd6f1cb791b534.patch
          tar -xzvf boost_1_67_0.tar.gz
          cd boost_1_67_0/tools/build/src/tools
          rm -rf darwin.jam
          wget https://raw.githubusercontent.com/t3sting3/boost167/refs/heads/main/darwin.jam

      # Apply patch to Boost
      - name: Apply patch to Boost
        run: patch boost_1_67_0/boost/atomic/detail/ops_gcc_x86_dcas.hpp < 6e14ca24dab50ad4c1fa8c27c7dd6f1cb791b534.patch 

      # Bootstrap Boost library
      - name: Bootstrap Boost
        run: cd boost_1_67_0 && ./bootstrap.sh --with-toolset=darwin

      # Build specific Boost libraries
      - name: Build Boost libraries
        run: cd boost_1_67_0 && ./b2 --with-system --with-filesystem --with-chrono --with-date_time --with-iostreams --with-program_options --with-thread --with-test cxxflags="-std=c++11 -Wno-deprecated-declarations" toolset=darwin

      # Link installed dependencies
      - name: Link dependencies
        run: brew link qt@5 berkeley-db@4

      # Confirm Clang and Xcode version
      - name: Verify Clang/Xcode version
        run: clang --version

      # Generate configure script (if using autotools)
      - name: Autogenerate configuration files
        run: ./autogen.sh

      # Configure the build
      - name: Configure build
        run: ./configure --disable-dependency-tracking --disable-werror --bindir=$(pwd)/release/bin --libdir=$(pwd)/release/lib

      # Compile the code
      - name: Compile the project
        run: make clean

      # Package the app into a .dmg file
      - name: Create .dmg package
        run: |
          echo "Creating .dmg file..."
          hdiutil create -volname "MyApp" -srcfolder "release" -ov -format UDZO "release/MyApp.dmg"

      # Upload the .dmg file as an artifact
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: tpay-macos13
          path: |
            release/*.dmg
